name: Test Suite
on:
  workflow_call:
    inputs:
      ref:
        description: "Commit SHA to checkout. Default: current (empty string)."
        type: string
        default: ""
      clickhouse_path:
        required: true
        type: string
      version:
        required: true
        type: string
      args:
        required: true
        type: string
      suite_name:
        required: true
        type: string
      timeout_minutes:
        required: true
        type: number
      storage_path:
        required: false
        type: string
        default: ""
      regression_args:
        required: false
        type: string
        default: ""
      condition:
        required: false
        type: string
        default: "true"
      runner_labels:
        required: false
        type: string
        default: '["self-hosted", "x86", "type-cx42", "type-cpx41", "in-hel1", "in-fsn1", "in-nbg1", "in-ash", "in-hil", "in-sin", "image-x86-app-docker-ce", "volume-cache-20GB"]'
      artifacts:
        required: true
        type: string
      artifact_name:
        required: false
        type: string
        default: ""

jobs:
  suite:
    runs-on: ${{ fromJSON(inputs.runner_labels) }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    env:
      SUITE: ${{ inputs.suite_name }}
      STORAGE: ${{ inputs.storage_path }}
      # AWS credentials
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
      # Docker credentials
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # Database credentials
      CHECKS_DATABASE_HOST: ${{ secrets.CHECKS_DATABASE_HOST }}
      CHECKS_DATABASE_USER: ${{ secrets.CHECKS_DATABASE_USER }}
      CHECKS_DATABASE_PASSWORD: ${{ secrets.CHECKS_DATABASE_PASSWORD }}
      # Python encoding
      PYTHONIOENCODING: utf-8
      # ClickHouse
      clickhouse_path: ${{ inputs.clickhouse_path }}
      version: ${{ inputs.version }}
      # Args
      args: ${{ inputs.args }}
      # Artifacts
      artifacts: ${{ inputs.artifacts }}
      artifact_paths: |
        ./report.html
        ./*.log.txt
        ./*.log
        ./*.html
        ./*/_instances/*.log
        ./*/_instances/*/logs/*.log
        ./*/*/_instances/*/logs/*.log
        ./*/*/_instances/*.log

    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: ‚ôªÔ∏è Cache setup
        uses: ./.github/actions/cache-setup

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üîÑ Process regression args
        run: |
          REGRESSION_ARGS="${{ inputs.regression_args }}"
          # AWS replacements
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AWS_BUCKET}}'/${{ secrets.AWS_BUCKET }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AWS_REGION}}'/${{ secrets.AWS_REGION }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AWS_KEY_ID}}'/${{ secrets.AWS_KEY_ID }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AWS_ACCESS_KEY}}'/${{ secrets.AWS_ACCESS_KEY }}}"
          # GCS replacements
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{GCS_URI}}'/${{ secrets.GCS_URI }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{GCS_KEY_ID}}'/${{ secrets.GCS_KEY_ID }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{GCS_KEY_SECRET}}'/${{ secrets.GCS_KEY_SECRET }}}"
          # Azure replacements
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AZURE_ACCOUNT_NAME}}'/${{ secrets.AZURE_ACCOUNT_NAME }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AZURE_STORAGE_KEY}}'/${{ secrets.AZURE_STORAGE_KEY }}}"
          REGRESSION_ARGS="${REGRESSION_ARGS//'{{AZURE_CONTAINER_NAME}}'/${{ secrets.AZURE_CONTAINER_NAME }}}"
          echo "REGRESSION_ARGS=$REGRESSION_ARGS" >> $GITHUB_ENV

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.REGRESSION_ARGS }}
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - name: üì§ Upload logs to results database
        if: always()
        timeout-minutes: 20
        run: .github/upload_results_to_database.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ inputs.artifact_name || format('{0}-artifacts', env.SUITE) }}
          path: ${{ env.artifact_paths }}

      - name: ‚ôªÔ∏è Cache sync
        if: always()
        uses: ./.github/actions/cache-sync 
