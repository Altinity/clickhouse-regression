name: üî¨ Run (Reusable) Tests CI/CD on x86
run-name: üî¨ ${{ inputs.custom_run_name || (inputs.suite == 'all' && format('{0} | Full Regression | x86', inputs.version)) || format('{0} | {1} | x86', inputs.version, inputs.suite)}}
  ${{ inputs.flags != 'none' && format(' | {0}', inputs.flags) || '' }}
  ${{ inputs.extra_args && format(' | {0}', inputs.extra_args) || '' }}

on:
  workflow_dispatch:
    inputs:
      package:
        description: "üì¶ Package. Either 'docker://' or 'https://'. Example: 'https://.../clickhouse-common-static_23.3.1.64_amd64.deb', or 'docker://altinity/clickhouse-server:23.8.8'"
        required: true
        type: string
        default: docker://altinity/clickhouse-server:24.3.12.76.altinitystable
      version:
        description: "üéØ Expected version. Example: 23.3.1.64"
        type: string
        required: true
        default: 24.3.12.76.altinitystable
      flags:
        description: "üö© Flags"
        type: choice
        options: 
          - "--use-keeper --with-analyzer"
          - "--use-keeper" 
          - "none"
          - "--as-binary"
          - "--as-binary --use-keeper"
          - "--thread-fuzzer"
          - "--thread-fuzzer --use-keeper"
          - "--thread-fuzzer --as-binary"
          - "--thread-fuzzer --as-binary --use-keeper"
          - "--with-analyzer"
          - "--with-analyzer --use-keeper"
          - "--with-analyzer --as-binary"
          - "--with-analyzer --as-binary --use-keeper"
          - "--thread-fuzzer --with-analyzer"
          - "--thread-fuzzer --with-analyzer --use-keeper"
          - "--thread-fuzzer --with-analyzer --as-binary"
          - "--thread-fuzzer --with-analyzer --as-binary --use-keeper"
      suite:
        description: "üß™ Test suite to run (default: all)"
        type: choice
        options:
          - all
          - all_aws
          - all_gcs
          - aes_encryption
          - aggregate_functions
          - atomic_insert
          - alter_all
          - alter_replace_partition
          - alter_attach_partition
          - alter_move_partition
          - attach
          - base_58
          - benchmark_all
          - benchmark_aws
          - benchmark_gcs
          - benchmark_minio
          - clickhouse_keeper
          - clickhouse_keeper_failover
          - data_types
          - datetime64_extended_range
          - disk_level_encryption
          - dns
          - engines
          - example
          - extended_precision_data_types
          - functions
          - iceberg
          - jwt_authentication
          - kafka
          - kerberos
          - key_value
          - ldap
          - lightweight_delete
          - memory
          - parquet_all
          - parquet
          - parquet_minio
          - parquet_s3
          - part_moves_between_shards
          - rbac
          - s3_all
          - s3_aws
          - s3_azure
          - s3_gcs
          - s3_minio
          - selects
          - session_timezone
          - ssl_server
          - tiered_storage_all
          - tiered_storage_aws
          - tiered_storage_gcs
          - tiered_storage_local
          - tiered_storage_minio
          - window_functions
      artifacts:
        description: "Artifact S3 bucket"
        type: choice
        options:
          - public
          - internal
      output_format:
        description: "üìú Testflows output style."
        type: choice
        options:
          - nice-new-fails
          - brisk-new-fails
          - plain-new-fails
          - pnice-new-fails
          - new-fails
          - classic
          - nice
          - fails
          - slick
          - brisk
          - quiet
          - short
          - manual
          - dots
          - progress
          - raw
      ref:
        description: "Commit SHA to checkout. Default: current (empty string)."
        type: string
        default: ""
      extra_args:
        description: "üéõÔ∏è Extra test program arguments. Default: none (empty string)."
        type: string
        default: ""
      custom_run_name:
        description: 'üìù Custom run name (optional)'
        required: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CHECKS_DATABASE_HOST: ${{ secrets.CHECKS_DATABASE_HOST }}
  CHECKS_DATABASE_USER: ${{ secrets.CHECKS_DATABASE_USER }}
  CHECKS_DATABASE_PASSWORD: ${{ secrets.CHECKS_DATABASE_PASSWORD }}
  PYTHONIOENCODING: utf-8
  clickhouse_path: ${{ inputs.package }}
  version: ${{ inputs.version }}
  artifacts: ${{ inputs.artifacts }}
  args: --test-to-end
    --no-colors
    --local
    --clickhouse ${{ inputs.package }}
    --clickhouse-version ${{ inputs.version }}
    --collect-service-logs
    --output ${{ inputs.output_format }}
    --parallel ${{ vars.PARALLEL }}
    --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" user.name="${GITHUB_ACTOR}" version="${{ inputs.version }}" package="${{ inputs.package }}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.name=$GITHUB_JOB job.retry=$GITHUB_RUN_ATTEMPT job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)" report.url=$SUITE_REPORT_INDEX_URL
    --log raw.log
    ${{ inputs.flags != 'none' && inputs.flags || ''}}
    ${{ inputs.extra_args }}
  artifact_paths: |
    ./report.html
    ./*.log.txt
    ./*.log
    ./*.html
    ./*/_instances/*.log
    ./*/_instances/*/logs/*.log
    ./*/*/_instances/*/logs/*.log
    ./*/*/_instances/*.log

jobs:
  aes_encryption:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'aes_encryption' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: aes_encryption
      timeout_minutes: 180

  aggregate_functions:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'aggregate_functions' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: aggregate_functions
      timeout_minutes: 360

  atomic_insert:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'atomic_insert' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: atomic_insert
      timeout_minutes: 180

  alter_replace_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_replace_partition' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: alter
      timeout_minutes: 300
      storage_path: /replace_partition
      regression_args: "--only \"/alter/replace partition/*\""
      artifact_name: alter-replace-partition-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'

  alter_attach_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_attach_partition' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: alter
      timeout_minutes: 600
      storage_path: /attach_partition
      regression_args: "--only \"/alter/attach partition/*\""
      artifact_name: alter-attach-partition-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'

  alter_move_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_move_partition' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: alter
      timeout_minutes: 600
      storage_path: /move_partition
      regression_args: "--only \"/alter/move partition/*\""
      artifact_name: alter-move-partition-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'

  attach:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'attach' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: attach
      timeout_minutes: 600
      regression_args: "--only \"/attach/*\""

  base_58:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'base_58' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: base_58
      timeout_minutes: 180

  benchmark_aws:
    if: ${{ inputs.suite == 'benchmark_aws' || inputs.suite == 'benchmark_all' || inputs.suite == 'all_aws' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ontime_benchmark
      timeout_minutes: 240
      storage_path: /aws
      regression_args: "--storage aws_s3 --aws-s3-bucket {{AWS_BUCKET}} --aws-s3-region {{AWS_REGION}} --aws-s3-key-id {{AWS_KEY_ID}} --aws-s3-access-key {{AWS_ACCESS_KEY}}"
      artifact_name: benchmark-aws-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'
    secrets: inherit

  benchmark_gcs:
    if: ${{ inputs.suite == 'benchmark_gcs' || inputs.suite == 'benchmark_all' || inputs.suite == 'all_gcs' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ontime_benchmark
      timeout_minutes: 240
      storage_path: /gcs
      regression_args: "--storage gcs --gcs-uri {{GCS_URI}} --gcs-key-id {{GCS_KEY_ID}} --gcs-key-secret {{GCS_KEY_SECRET}}"
      artifact_name: benchmark-gcs-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'
    secrets: inherit

  benchmark_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'benchmark_all' || inputs.suite == 'benchmark_minio' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ontime_benchmark
      timeout_minutes: 180
      storage_path: /minio
      regression_args: "--storage minio"
      artifact_name: benchmark-minio-artifacts
      runner_server_type: '["type-cx52", "type-cpx51"]'

  clickhouse_keeper:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: clickhouse_keeper
      timeout_minutes: 180
      storage_path: /no_ssl

  clickhouse_keeper_ssl:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: clickhouse_keeper
      timeout_minutes: 180
      storage_path: /ssl
      regression_args: "--ssl"
      artifact_name: clickhouse_keeper-ssl-artifacts

  clickhouse_keeper_failover:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper_failover' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: clickhouse_keeper_failover
      timeout_minutes: 180
      storage_path: /failover

  data_types:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'data_types' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: data_types
      timeout_minutes: 180

  datetime64_extended_range:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'datetime64_extended_range' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: datetime64_extended_range
      timeout_minutes: 180

  disk_level_encryption:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'disk_level_encryption' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: disk_level_encryption
      timeout_minutes: 180

  dns:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'dns' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: dns
      timeout_minutes: 180

  engines:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'engines' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: engines
      timeout_minutes: 180

  example:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'example' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: example
      timeout_minutes: 180

  extended_precision_data_types:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'extended_precision_data_types' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: extended_precision_data_types
      timeout_minutes: 180

  functions:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'functions' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: functions
      timeout_minutes: 180

  iceberg:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'iceberg' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: iceberg
      timeout_minutes: 180

  jwt_authentication:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'jwt_authentication' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: jwt_authentication
      timeout_minutes: 180

  kafka:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'kafka' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: kafka
      timeout_minutes: 180

  kerberos:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'kerberos' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: kerberos
      timeout_minutes: 180

  key_value:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'key_value' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: key_value
      timeout_minutes: 180

  ldap_authentication:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ldap/authentication
      timeout_minutes: 180
      artifact_name: ldap-authentication-artifacts

  ldap_external_user_directory:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ldap/external_user_directory
      timeout_minutes: 180
      artifact_name: ldap-external_user_directory-artifacts

  ldap_role_mapping:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ldap/role_mapping
      timeout_minutes: 180
      artifact_name: ldap-role_mapping-artifacts

  lightweight_delete:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'lightweight_delete' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: lightweight_delete
      timeout_minutes: 240

  memory:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'memory' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: memory
      timeout_minutes: 1800

  parquet:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'parquet' || inputs.suite == 'parquet_all'}}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: parquet
      timeout_minutes: 300
      storage_path: /no_s3

  parquet_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'parquet_minio' || inputs.suite == 'parquet_all'}}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: parquet
      timeout_minutes: 300
      storage_path: /minio
      regression_args: "--storage minio --only \"/parquet/minio/*\""
      artifact_name: parquet-minio-artifacts

  parquet_aws_s3:
    if: ${{ inputs.suite == 'parquet_s3' || inputs.suite == 'parquet_all' || inputs.suite == 'all_aws' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: parquet
      timeout_minutes: 300
      storage_path: /aws_s3
      regression_args: "--storage aws_s3 --aws-s3-bucket {{AWS_BUCKET}} --aws-s3-region {{AWS_REGION}} --aws-s3-key-id {{AWS_KEY_ID}} --aws-s3-access-key {{AWS_ACCESS_KEY}} --only \"/parquet/aws s3/*\""
      artifact_name: parquet-aws-artifacts
    secrets: inherit

  part_moves_between_shards:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'part_moves_between_shards' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: part_moves_between_shards
      timeout_minutes: 180

  rbac:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'rbac' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: rbac
      timeout_minutes: 540

  s3_aws:
    if: ${{ inputs.suite == 's3_aws' || inputs.suite == 's3_all' || inputs.suite == 'all_aws' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: s3
      timeout_minutes: 360
      storage_path: /aws
      regression_args: "--storage aws_s3 --aws-s3-bucket {{AWS_BUCKET}} --aws-s3-region {{AWS_REGION}} --aws-s3-key-id {{AWS_KEY_ID}} --aws-s3-access-key {{AWS_ACCESS_KEY}}"
      artifact_name: s3-aws-artifacts
    secrets: inherit

  s3_azure:
    if: ${{ inputs.suite == 's3_azure' || inputs.suite == 's3_all' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: s3
      timeout_minutes: 360
      storage_path: /azure
      regression_args: "--storage azure --azure-account-name {{AZURE_ACCOUNT_NAME}} --azure-storage-key {{AZURE_STORAGE_KEY}} --azure-container {{AZURE_CONTAINER_NAME}}"
      artifact_name: s3-azure-artifacts
    secrets: inherit

  s3_gcs:
    if: ${{ inputs.suite == 's3_gcs' || inputs.suite == 's3_all' || inputs.suite == 'all_gcs' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: s3
      timeout_minutes: 360
      storage_path: /gcs
      regression_args: "--storage gcs --gcs-uri {{GCS_URI}} --gcs-key-id {{GCS_KEY_ID}} --gcs-key-secret {{GCS_KEY_SECRET}}"
      artifact_name: s3-gcs-artifacts
    secrets: inherit

  s3_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 's3_all' || inputs.suite == 's3_minio' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: s3
      timeout_minutes: 360
      storage_path: /minio
      regression_args: "--storage minio"
      artifact_name: s3-minio-artifacts

  selects:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'selects' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: selects
      timeout_minutes: 180

  session_timezone:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'session_timezone' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: session_timezone
      timeout_minutes: 180

  ssl_server:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ssl_server' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: ssl_server
      timeout_minutes: 360

  tiered_storage_aws:
    if: ${{ inputs.suite == 'tiered_storage_aws' || inputs.suite == 'tiered_storage_all' || inputs.suite == 'all_aws' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: tiered_storage
      timeout_minutes: 180
      storage_path: /aws
      regression_args: "--with-s3amazon --aws-s3-access-key {{AWS_ACCESS_KEY}} --aws-s3-key-id {{AWS_KEY_ID}} --aws-s3-uri https://s3.{{AWS_REGION}}.amazonaws.com/{{AWS_BUCKET}}/data/"
      artifact_name: tiered_storage-aws-artifacts
    secrets: inherit

  tiered_storage_gcs:
    if: ${{ inputs.suite == 'tiered_storage_gcs' || inputs.suite == 'tiered_storage_all' || inputs.suite == 'all_gcs' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: tiered_storage
      timeout_minutes: 180
      storage_path: /gcs
      regression_args: "--with-s3gcs --gcs-uri {{GCS_URI}} --gcs-key-id {{GCS_KEY_ID}} --gcs-key-secret {{GCS_KEY_SECRET}}"
      artifact_name: tiered_storage-gcs-artifacts
    secrets: inherit

  tiered_storage_local:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'tiered_storage_local' || inputs.suite == 'tiered_storage_all' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: tiered_storage
      timeout_minutes: 180

  tiered_storage_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'tiered_storage_minio' || inputs.suite == 'tiered_storage_all' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: tiered_storage
      timeout_minutes: 180
      storage_path: /minio
      regression_args: "--with-minio"
      artifact_name: tiered_storage-minio-artifacts

  window_functions:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'window_functions' }}
    uses: ./.github/workflows/reusable-suite.yml
    with:
      suite_name: window_functions
      timeout_minutes: 180
