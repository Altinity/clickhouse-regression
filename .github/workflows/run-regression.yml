name: üî¨ Run Tests CI/CD on x86
run-name: üî¨ ${{ inputs.custom_run_name || (inputs.suite == 'all' && format('{0} | Full Regression | x86', inputs.version)) || format('{0} | {1} | x86', inputs.version, inputs.suite)}}
  ${{ inputs.flags != 'none' && format(' | {0}', inputs.flags) || '' }}
  ${{ inputs.extra_args && format(' | {0}', inputs.extra_args) || '' }}

on:
  workflow_dispatch:
    inputs:
      package:
        description: "üì¶ Package. Either 'docker://' or 'https://'. Example: 'https://.../clickhouse-common-static_23.3.1.64_amd64.deb', or 'docker://altinity/clickhouse-server:23.8.8'"
        required: true
        type: string
        default: docker://altinity/clickhouse-server:24.3.12.76.altinitystable
      version:
        description: "üéØ Expected version. Example: 23.3.1.64"
        type: string
        required: true
        default: 24.3.12.76.altinitystable
      flags:
        description: "üö© Flags"
        type: choice
        options: 
          - "--use-keeper" 
          - "none"
          - "--as-binary"
          - "--as-binary --use-keeper"
          - "--thread-fuzzer"
          - "--thread-fuzzer --use-keeper"
          - "--thread-fuzzer --as-binary"
          - "--thread-fuzzer --as-binary --use-keeper"
          - "--with-analyzer"
          - "--with-analyzer --use-keeper"
          - "--with-analyzer --as-binary"
          - "--with-analyzer --as-binary --use-keeper"
          - "--thread-fuzzer --with-analyzer"
          - "--thread-fuzzer --with-analyzer --use-keeper"
          - "--thread-fuzzer --with-analyzer --as-binary"
          - "--thread-fuzzer --with-analyzer --as-binary --use-keeper"
      suite:
        description: "üß™ Test suite to run (default: all)"
        type: choice
        options:
          - all
          - all_aws
          - all_gcs
          - aes_encryption
          - aggregate_functions
          - atomic_insert
          - alter_all
          - alter_replace_partition
          - alter_attach_partition
          - alter_move_partition
          - attach
          - base_58
          - benchmark_all
          - benchmark_aws
          - benchmark_gcs
          - benchmark_minio
          - clickhouse_keeper
          - clickhouse_keeper_failover
          - data_lakes
          - data_types
          - datetime64_extended_range
          - disk_level_encryption
          - dns
          - engines
          - example
          - extended_precision_data_types
          - functions
          - jwt_authentication
          - kafka
          - kerberos
          - key_value
          - ldap
          - lightweight_delete
          - memory
          - parquet_all
          - parquet
          - parquet_minio
          - parquet_s3
          - part_moves_between_shards
          - rbac
          - s3_all
          - s3_aws
          - s3_gcs
          - s3_minio
          - selects
          - session_timezone
          - ssl_server
          - tiered_storage_all
          - tiered_storage_aws
          - tiered_storage_gcs
          - tiered_storage_local
          - tiered_storage_minio
          - window_functions
      artifacts:
        description: "Artifact S3 bucket"
        type: choice
        options:
          - public
          - internal
      output_format:
        description: "üìú Testflows output style."
        type: choice
        options:
          - nice-new-fails
          - brisk-new-fails
          - plain-new-fails
          - pnice-new-fails
          - new-fails
          - classic
          - nice
          - fails
          - slick
          - brisk
          - quiet
          - short
          - manual
          - dots
          - progress
          - raw
      ref:
        description: "Commit SHA to checkout. Default: current (empty string)."
        type: string
        default: ""
      extra_args:
        description: "üéõÔ∏è Extra test program arguments. Default: none (empty string)."
        type: string
        default: ""
      custom_run_name:
        description: 'üìù Custom run name (optional)'
        required: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CHECKS_DATABASE_HOST: ${{ secrets.CHECKS_DATABASE_HOST }}
  CHECKS_DATABASE_USER: ${{ secrets.CHECKS_DATABASE_USER }}
  CHECKS_DATABASE_PASSWORD: ${{ secrets.CHECKS_DATABASE_PASSWORD }}
  PYTHONIOENCODING: utf-8
  clickhouse_path: ${{ inputs.package }}
  version: ${{ inputs.version }}
  artifacts: ${{ inputs.artifacts }}
  args: --test-to-end
    --no-colors
    --local
    --clickhouse ${{ inputs.package }}
    --clickhouse-version ${{ inputs.version }}
    --collect-service-logs
    --output ${{ inputs.output_format }}
    --parallel ${{ vars.PARALLEL }}
    --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" user.name="${GITHUB_ACTOR}" version="${{ inputs.version }}" package="${{ inputs.package }}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="${GITHUB_SHA}" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)" report.url=$SUITE_REPORT_INDEX_URL
    --log raw.log
    ${{ inputs.flags != 'none' && inputs.flags || ''}}
    ${{ inputs.extra_args }}
  artifact_paths: |
    ./report.html
    ./*.log.txt
    ./*.log
    ./*.html
    ./*/_instances/*.log
    ./*/_instances/*/logs/*.log
    ./*/*/_instances/*/logs/*.log
    ./*/*/_instances/*.log

jobs:
  aes_encryption:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'aes_encryption' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: aes_encryption
      suite: aes_encryption
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  aggregate_functions:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'aggregate_functions' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: aggregate_functions
      suite: aggregate_functions
      runner_type: type-cpx51
      timeout: 360
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  atomic_insert:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'atomic_insert' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: atomic_insert
      suite: atomic_insert
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  alter_replace_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_replace_partition' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: alter_replace_partition
      suite: alter
      runner_type: type-cpx51
      timeout: 300
      extra_args: ${{ inputs.extra_args }} --only "/alter/replace partition/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}
    
  alter_attach_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_attach_partition' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: alter_attach_partition
      suite: alter
      runner_type: type-cpx51
      timeout: 3000
      extra_args: ${{ inputs.extra_args }} --only "/alter/attach partition/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  alter_move_partition:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'alter_all' || inputs.suite == 'alter_move_partition' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: alter_move_partition
      suite: alter
      runner_type: type-cpx41
      timeout: 3000
      extra_args: ${{ inputs.extra_args }} --only "/alter/move partition/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  attach:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'attach' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: attach
      suite: attach
      runner_type: type-cpx41
      timeout: 3000
      extra_args: ${{ inputs.extra_args }} --only "/attach/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  base_58:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'base_58' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: base_58
      suite: base_58
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  benchmark_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'benchmark_all' || inputs.suite == 'benchmark_minio' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: benchmark_minio
      suite: ontime_benchmark
      runner_type: type-cpx51
      timeout: 180
      extra_args: ${{ inputs.extra_args }} --storage minio
      regression_py: benchmark.py
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  clickhouse_keeper:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: clickhouse_keeper
      suite: clickhouse_keeper
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  clickhouse_keeper_ssl:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: clickhouse_keeper_ssl
      suite: clickhouse_keeper
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }} --ssl
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  clickhouse_keeper_failover:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'clickhouse_keeper_failover' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: clickhouse_keeper_failover
      suite: clickhouse_keeper_failover
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  data_types:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'data_types' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: data_types
      suite: data_types
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  datetime64_extended_range:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'datetime64_extended_range' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: datetime64_extended_range
      suite: datetime64_extended_range
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  disk_level_encryption:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'disk_level_encryption' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: disk_level_encryption
      suite: disk_level_encryption
      runner_type: type-cpx41
      timeout: 240
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  dns:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'dns' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: dns
      suite: dns
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  engines:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'engines' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: engines
      suite: engines
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}
  
  example:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'example' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: example
      suite: example
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  extended_precision_data_types:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'extended_precision_data_types' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: extended_precision_data_types
      suite: extended_precision_data_types
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  functions:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'functions' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: functions
      suite: functions
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}
    
  jwt_authentication:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'jwt_authentication' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: jwt_authentication
      suite: jwt_authentication
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  kafka:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'kafka' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: kafka
      suite: kafka
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  kerberos:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'kerberos' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: kerberos
      suite: kerberos
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  key_value:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'key_value' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: key_value
      suite: key_value
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  ldap_authentication:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: ldap_authentication
      suite: ldap/authentication
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  ldap_external_user_directory:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: ldap_external_user_directory
      suite: ldap/external_user_directory
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  ldap_role_mapping:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ldap' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: ldap_role_mapping
      suite: ldap/role_mapping
      runner_type: type-cpx41
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  lightweight_delete:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'lightweight_delete' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: lightweight_delete
      suite: lightweight_delete
      runner_type: type-cpx51
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  memory:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'memory' }}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: memory
      suite: memory
      runner_type: type-cpx51
      timeout: 1800
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  parquet:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'parquet' || inputs.suite == 'parquet_all'}}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: parquet
      suite: parquet
      runner_type: type-cpx51
      timeout: 180
      extra_args: ${{ inputs.extra_args }}
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  parquet_minio:
    if: ${{ inputs.suite == 'all' || inputs.suite == 'parquet_minio' || inputs.suite == 'parquet_all'}}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: parquet_minio
      suite: parquet
      runner_type: type-cpx41
      timeout: 300
      extra_args: ${{ inputs.extra_args }} --storage minio --only "/parquet/minio/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  parquet_aws_s3:
    if : ${{ inputs.suite == 'all' || inputs.suite == 'parquet_s3' || inputs.suite == 'parquet_all'}}
    uses: ./.github/workflows/reusable-suite-x86.yml
    secrets: inherit
    with:
      name: parquet_aws_s3
      suite: parquet
      runner_type: type-cpx51
      timeout: 300
      extra_args: ${{ inputs.extra_args }} 
        --storage aws_s3 
        --aws-s3-bucket $AWS_BUCKET
        --aws-s3-region $AWS_DEFAULT_REGION
        --aws-s3-key-id $AWS_KEY_ID
        --aws-s3-access-key $AWS_SECRET_ACCESS_KEY
        --only "/parquet/aws s3/*"
      package: ${{ inputs.package }}
      version: ${{ inputs.version }}
      ref: ${{ inputs.ref }}
      output_format: ${{ inputs.output_format }}
      artifact_bucket: ${{ inputs.artifacts }}

  part_moves_between_shards:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: part_moves_between_shards
    if: ${{ inputs.suite == 'all' || inputs.suite == 'part_moves_between_shards' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  rbac:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 540
    env:
      SUITE: rbac
    if: ${{ inputs.suite == 'all' || inputs.suite == 'rbac' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  s3_aws:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 300
    env:
      SUITE: s3
      STORAGE: /aws
    if: ${{ inputs.suite == 's3_aws' || inputs.suite == 's3_all' || inputs.suite == 'all_aws' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --storage aws_s3
              --aws-s3-bucket ${{ secrets.AWS_BUCKET }}
              --aws-s3-region ${{ secrets.AWS_REGION }}
              --aws-s3-key-id ${{ secrets.AWS_KEY_ID }}
              --aws-s3-access-key ${{ secrets.AWS_ACCESS_KEY }}
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-aws-artifacts
          path: ${{ env.artifact_paths}}

  s3_gcs:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: s3
      STORAGE: /gcs
    if: ${{ inputs.suite == 's3_gcs' || inputs.suite == 's3_all' || inputs.suite == 'all_gcs' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --storage gcs
              --gcs-uri ${{ secrets.GCS_URI }}
              --gcs-key-id ${{ secrets.GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.GCS_KEY_SECRET }}
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-gcs-artifacts
          path: ${{ env.artifact_paths}}

  s3_minio:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: s3
      STORAGE: /minio
    if: ${{ inputs.suite == 'all' || inputs.suite == 's3_all' || inputs.suite == 's3_minio' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --storage minio
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-minio-artifacts
          path: ${{ env.artifact_paths}}

  selects:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: selects
    if: ${{ inputs.suite == 'all' || inputs.suite == 'selects' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  session_timezone:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: session_timezone
    if: ${{ inputs.suite == 'all' || inputs.suite == 'session_timezone' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  ssl_server:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 360
    env:
      SUITE: ssl_server
    if: ${{ inputs.suite == 'all' || inputs.suite == 'ssl_server' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  tiered_storage_aws:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: tiered_storage
      STORAGE: /aws
    if: ${{ inputs.suite == 'tiered_storage_aws' || inputs.suite == 'tiered_storage_all' || inputs.suite == 'all_aws' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --with-s3amazon
              --aws-s3-access-key ${{ secrets.AWS_ACCESS_KEY }}
              --aws-s3-key-id ${{ secrets.AWS_KEY_ID }}
              --aws-s3-uri https://s3.${{ secrets.AWS_REGION}}.amazonaws.com/${{ secrets.AWS_BUCKET }}/data/
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-aws-artifacts
          path: ${{ env.artifact_paths}}

  tiered_storage_gcs:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: tiered_storage
      STORAGE: /gcs
    if: ${{ inputs.suite == 'tiered_storage_gcs' || inputs.suite == 'tiered_storage_all' || inputs.suite == 'all_gcs' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --with-s3gcs
              --gcs-uri ${{ secrets.GCS_URI }}
              --gcs-key-id ${{ secrets.GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.GCS_KEY_SECRET }}
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-gcs-artifacts
          path: ${{ env.artifact_paths}}

  tiered_storage_local:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: tiered_storage
    if: ${{ inputs.suite == 'all' || inputs.suite == 'tiered_storage_local' || inputs.suite == 'tiered_storage_all' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}

  tiered_storage_minio:
    runs-on: [self-hosted, x86, type-cpx51, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: tiered_storage
      STORAGE: /minio
    if: ${{ inputs.suite == 'all' || inputs.suite == 'tiered_storage_minio' || inputs.suite == 'tiered_storage_all' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --with-minio
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-minio-artifacts
          path: ${{ env.artifact_paths}}

  window_functions:
    runs-on: [self-hosted, x86, type-cpx41, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      SUITE: window_functions
    if: ${{ inputs.suite == 'all' || inputs.suite == 'window_functions' }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: üõ†Ô∏è Setup
        run: .github/setup.sh

      - name: üß™ Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              ${{ env.args }} || EXITCODE=$?; 
              .github/add_link_to_logs.sh; 
              exit $EXITCODE

      - name: üìù Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh ${{ vars.UPLOAD_LOGS }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SUITE }}-artifacts
          path: ${{ env.artifact_paths}}
