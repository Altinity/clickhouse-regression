{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Parquet File Schema",
  "description": "Schema for defining the structure and properties of a Parquet file using Parquet-Java API terms with support for complex types in MAP values.",
  "type": "object",
  "properties": {
    "fileName": {
      "description": "Name of the output Parquet file.",
      "type": "string"
    },
    "options": {
        "description": "Additional options for the Parquet writer.",
        "type": "object",
        "properties": {
            "writerVersion": {
              "description": "Parquet writer version to use.",
              "type": "string",
              "enum": ["1.0", "2.0"],
              "default": "1.0"
            },
            "compression": {
              "description": "Compression codec to use for the Parquet file.",
              "type": "string",
              "enum": ["NONE", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD"],
              "default": "SNAPPY"
            },
            "rowGroupSize": {
              "description": "Size of row groups in bytes.",
              "type": "integer",
              "default": 134217728
            },
            "pageSize": {
              "description": "Size of pages in bytes.",
              "type": "integer",
              "default": 1048576
            },
            "encodings": {
              "description": "List of encodings to use for columns.",
              "type": "array",
              "items": {
                  "type": "string",
                  "enum": ["PLAIN", "RLE", "BIT_PACKED", "DELTA_BINARY_PACKED", "DELTA_LENGTH_BYTE_ARRAY", "DELTA_BYTE_ARRAY",
                  "RLE_DICTIONARY", "PLAIN_DICTIONARY", "BYTE_STREAM_SPLIT"]
              },
              "default": ["PLAIN"]
            },
            "bloomFilter": {
              "description": "Bloom filter algorithm to use for columns.",
              "type": "string",
              "enum": ["none", "all", ["column1", "column2"]],
              "default": "none"
              }
        },
        "default": {}
    },
    "schema": {
      "description": "List of columns and their properties, aligned with Parquet-Java API definitions.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the column.",
            "type": "string"
          },
          "schemaType": {
            "description": "Schema type, as defined by Parquet-Java API (optional, required, optionalGroup, etc.).",
            "type": "string",
            "enum": ["optional", "required", "repeated", "optionalGroup", "requiredGroup", "repeatedGroup"]
          },
          "physicalType": {
            "description": "The physical type of the column, as defined by Parquet-Java.",
            "type": "string",
            "enum": ["INT32", "INT64", "BOOLEAN", "FLOAT", "DOUBLE", "BINARY", "FIXED_LEN_BYTE_ARRAY"]
          },
          "logicalType": {
            "description": "Logical type for the column (e.g., UTF8 for string), matching OriginalType in Parquet-Java.",
            "type": "string",
            "enum": ["UTF8", "DECIMAL", "DATE", "TIME_MILLIS", "TIME_MICROS", "TIMESTAMP_MILLIS", "TIMESTAMP_MICROS",
              "ENUM", "NONE", "MAP", "LIST", "STRING", "MAP_KEY_VALUE", "TIME", "INTEGER", "JSON", "BSON", "UUID",
              "INTERVAL", "FLOAT16", "UINT_8", "UINT_16", "UINT_32", "UINT_64", "INT_8", "INT_16", "INT_32", "INT_64"]
          },
          "precision": {
            "description": "Precision for DECIMAL logical type.",
            "type": "integer",
            "minimum": 1,
            "default": null
          },
          "scale": {
            "description": "Scale for DECIMAL logical type.",
            "type": "integer",
            "minimum": 0,
            "default": null
          },
          "length": {
            "description": "Length for FIXED_LEN_BYTE_ARRAY physical type.",
            "type": "integer",
            "minimum": 1,
            "default": null
          },
          "fields": {
            "description": "Fields for a group or nested schema type (used with optionalGroup, requiredGroup, or repeatedGroup).",
            "type": "array",
            "items": {
              "$ref": "#/properties/schema/items"
            },
            "default": []
          },
          "keyType": {
            "description": "Schema for the key in a map type (physical and logical type).",
            "type": "object",
            "properties": {
              "physicalType": {
                "description": "Physical type for the map key.",
                "type": "string",
                "enum": ["INT32", "INT64", "BINARY"]
              },
              "logicalType": {
                "description": "Logical type for the map key, if any.",
                "type": "string",
                "enum": ["UTF8", "NONE"]
              }
            }
          },
          "valueType": {
            "description": "Schema for the value in a map type (physical and logical type), with support for complex types like GROUP or MAP.",
            "type": "object",
            "properties": {
              "physicalType": {
                "description": "Physical type for the map value.",
                "type": "string",
                "enum": ["INT32", "INT64", "BINARY", "BOOLEAN", "FLOAT", "DOUBLE", "MAP", "GROUP"]
              },
              "logicalType": {
                "description": "Logical type for the map value, if any.",
                "type": "string",
                "enum": ["UTF8", "DECIMAL", "NONE"]
              },
              "fields": {
                "description": "Fields for the value if it is a GROUP or MAP type.",
                "type": "array",
                "items": {
                  "$ref": "#/properties/schema/items"
                }
              }
            }
          }
        },
        "required": ["name", "schemaType"]
      }
    }
  },
  "required": ["fileName", "schema"]
}
